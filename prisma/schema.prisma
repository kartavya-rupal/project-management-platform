generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  clerkUserId    String        @unique
  email          String        @unique
  name           String?
  imageUrl       String?
  createdIssues  Issue[]       @relation("Reporter")
  assignedIssues Issue[]       @relation("Assignee")
  activityLogs   ActivityLog[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  orgPosts     OrgPost[]
  postComments PostComment[]
  postVotes    PostVote[]
  commentVotes CommentVote[]
}

model Project {
  id             String        @id @default(cuid())
  name           String
  key            String
  description    String?
  organizationId String
  sprints        Sprint[]
  issues         Issue[]
  activityLogs   ActivityLog[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@unique([organizationId, key])
}

model Sprint {
  id           String        @id @default(cuid())
  name         String        @unique
  startDate    DateTime
  endDate      DateTime
  status       SprintStatus  @default(PLANNED)
  project      Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String
  issues       Issue[]
  activityLogs ActivityLog[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Issue {
  id           String        @id @default(cuid())
  title        String
  description  String?
  status       IssueStatus
  order        Int
  priority     IssuePriority
  assignee     User?         @relation("Assignee", fields: [assigneeId], references: [id])
  assigneeId   String?
  reporter     User          @relation("Reporter", fields: [reporterId], references: [id])
  reporterId   String
  project      Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String
  sprint       Sprint?       @relation(fields: [sprintId], references: [id], onDelete: SetNull)
  sprintId     String?
  activityLogs ActivityLog[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([status, order])
}

model ActivityLog {
  id        String       @id @default(cuid())
  message   String
  type      ActivityType
  user      User?        @relation(fields: [userId], references: [id])
  userId    String?
  issue     Issue?       @relation(fields: [issueId], references: [id])
  issueId   String?
  project   Project?     @relation(fields: [projectId], references: [id])
  projectId String?
  sprint    Sprint?      @relation(fields: [sprintId], references: [id])
  sprintId  String?
  createdAt DateTime     @default(now())
}

model OrgPost {
  id        String        @id @default(cuid())
  title     String
  content   String
  image     String? // optional image URL
  link      String? // optional link URL
  author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  comments  PostComment[]
  votes     PostVote[]
  orgId     String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model PostComment {
  id        String        @id @default(cuid())
  content   String
  author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  post      OrgPost       @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  parent    PostComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId  String?
  children  PostComment[] @relation("CommentReplies")
  votes     CommentVote[]
  createdAt DateTime      @default(now())
}

model PostVote {
  id        String   @id @default(cuid())
  post      OrgPost  @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  value     Int // 1 for upvote, -1 for downvote
  createdAt DateTime @default(now())

  @@unique([postId, userId])
}

model CommentVote {
  id        String      @id @default(cuid())
  comment   PostComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  value     Int // 1 for upvote, -1 for downvote
  createdAt DateTime    @default(now())

  @@unique([commentId, userId])
}

enum SprintStatus {
  PLANNED
  ACTIVE
  COMPLETED
}

enum IssueStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ActivityType {
  CREATED
  UPDATED
  DELETED
  MOVED
  COMMENTED
  STATUS_CHANGED
  PRIORITY_CHANGED
}
